##### powerlevel10k #####
# powerlevel10k opens a wizard if it doesn't find a configuration file.
# However, the wizard also shows up due to errors in your .zshrc,
# or due to hitting Ctrl-C before the prompt finishes loading.
POWERLEVEL9K_DISABLE_CONFIGURATION_WIZARD='true'

# Instant prompt - this should be executed as early as possible, but any program
# requiring console input must go above this block.
[[ -f "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]] \
  && . "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"

##### Environment variables #####
export BROWSER='google-chrome-stable'
export EDITOR='vim'

##### PATH #####
# $PATH is already tied to the $path array by default.
# -U enforces a unique constraint on the array.
typeset -U PATH path
[[ -d "$HOME/.local/bin" ]] && path=("$HOME/.local/bin" $path)
{{ if eq .chezmoi.os "darwin" -}}
# Prioritize Homebrew curl over system curl.
[[ -d '/usr/local/opt/curl/bin' ]] && path=('/usr/local/opt/curl/bin' $path)
{{ end -}}

##### MANPATH #####
# -T ties the $MANPATH variable to the $manpath array, split by `:`.
typeset -UT MANPATH manpath :
[[ -d "$HOME/.local/share/man" ]] && manpath=("$HOME/.local/share/man" $manpath)

##### External #####
[[ -f "$HOME/.cargo/env" ]] && . "$HOME/.cargo/env"
[[ -f "$HOME/.nix-profile/etc/profile.d/nix.sh" ]] && . "$HOME/.nix-profile/etc/profile.d/nix.sh"

##### Aliases #####
# Enable colors by default.
alias diff='diff --color=auto'
alias egrep='egrep --color=auto'
alias fgrep='fgrep --color=auto'
alias grep='grep --color=auto'

# Replace utilities with their equivalents.
alias cat='bat --pager=never --style=plain'
alias ls='exa --group-directories-first'

# Prevent clobbering when dealing with files.
alias cp='cp -i'
alias mv='mv -i'
alias rm='rm -i'

# This trick allows aliases to work with sudo.
alias sudo='sudo '

# Convenient aliases for frequently used commands.
alias p='ipython'
alias v='vim'

# When cd-ing into a directory, print its contents.
function _ls_hook() { ls }
chpwd_functions=(${chpwd_functions[@]} _ls_hook)

##### atuin #####
export ATUIN_NOBIND='true' # don't bind any keys
eval "$(atuin init zsh)"
bindkey '^r' _atuin_search_widget # [Ctrl-R] - search through history

##### bat #####
export BAT_THEME='TwoDark'

##### vivid #####
export LS_COLORS="$(vivid generate one-dark)"

##### zoxide #####
{{ if eq .chezmoi.os "darwin" -}}
export _ZO_RESOLVE_SYMLINKS=1
{{ end -}}
eval "$(zoxide init zsh)"

# Setup for zoxide development.
fpath=("$HOME/ws/zoxide/contrib/completions" $fpath)

##### zgen #####
[[ -f "$HOME/.zgen/zgen.zsh" ]] && . "$HOME/.zgen/zgen.zsh"
if ! zgen saved; then
  zgen load djui/alias-tips                     # hints if you forget to use an alias
  zgen load romkatv/powerlevel10k powerlevel10k # agnoster-inspired prompt
  zgen load zdharma/fast-syntax-highlighting
  zgen load zsh-users/zsh-autosuggestions       # suggests commands based on history
  zgen save
fi

##### History #####
HISTSIZE=10000                # number of commands to load into memory
SAVEHIST=100000               # number of commands to save in history file (>= HISTSIZE)
HISTFILE="$HOME/.zsh_history" # location of history file

setopt EXTENDED_HISTORY       # store timestamps in history
setopt HIST_FIND_NO_DUPS      # don't show duplicate lines when navigating history
setopt HIST_IGNORE_ALL_DUPS   # don't store duplicate commands
setopt INC_APPEND_HISTORY     # immediately append to history file, preventing data loss on shell crash

##### Keybindings #####
autoload -U up-line-or-beginning-search
autoload -U down-line-or-beginning-search
autoload -U edit-command-line

zle -N up-line-or-beginning-search
zle -N down-line-or-beginning-search
zle -N edit-command-line

# The builtin $key associative array is the most portable way of defining
# keybindings. See what keys are available using `echo ${(k)key}`.
bindkey "$key[Up]" up-line-or-beginning-search     # [Up] - navigate backward through history using prefix
bindkey "$key[Down]" down-line-or-beginning-search # [Down] - navigate forward through history using prefix
bindkey "$key[PageUp]" up-line-or-history          # [PageUp] - go up a line of history
bindkey "$key[PageDown]" down-line-or-history      # [PageDown] - go down a line of history
bindkey "$key[Home]" beginning-of-line             # [Home] - go to beginning of line
bindkey "$key[End]" end-of-line                    # [End] - go to end of line
bindkey "$key[Delete]" delete-char                 # [Delete] - delete forward
bindkey "$terminfo[kcbt]" reverse-menu-complete  # [Shift-Tab] - move backwards through completions
bindkey '^X^E' edit-command-line                   # [Ctrl-X-Ctrl-E] - edit the current command in $EDITOR
bindkey '^X^V' copy-prev-shell-word                # [Ctrl-X-Ctrl-V] - copy previous shell word, useful for renaming files
if (( ${+key[BackSpace]} )); then                  # [BackSpace] - delete backward
  bindkey "$key[BackSpace]" backward-delete-char
elif (( ${+key[Backspace]} )); then
  bindkey "$key[Backspace]" backward-delete-char
else
  echo '.zshrc: BackSpace character not found'
fi

{{ if eq .chezmoi.os "linux" -}}
# Natural text editing.
bindkey "$key[BackSpace]" backward-delete-char     # [BackSpace] - delete backward
bindkey '^[[1;5D' backward-word                    # [Ctrl-Left] - move backward one word
bindkey '^[[1;5C' forward-word                     # [Ctrl-Right] - move forward one word
bindkey '^H' backward-kill-word                    # [Ctrl-Backspace] - delete word backward
bindkey '^[[3;5~' kill-word                        # [Ctrl-Delete] - delete word forward

{{ else if eq .chezmoi.os "darwin" -}}
# To enable natural text editing, go to
# iTerm2 > Preferences > Profiles > Keys > Key Mappings
# and change the preset to "Natural Text Editing".

{{ end -}}

##### Completions #####
# autoload loads a function upon its first reference.
# -U disables alias expansion when loading this function.
# -z forces zsh-style autoloading (rather than ksh-style autoloading).
autoload -Uz compinit

# compinit initializes zsh's completion system.
# -i avoids loading insecure completion files (i.e. not owned by root/$USER).
compinit -i

##### powerlevel10k #####
# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ -f "$HOME/.p10k.zsh" ]] && . "$HOME/.p10k.zsh"
